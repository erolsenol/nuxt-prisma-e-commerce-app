// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  firstname String?   @db.VarChar(255)
  lastname  String?   @db.VarChar(255)
  username  String    @db.VarChar(255)
  email     String    @unique @db.VarChar(255)
  phone     String?   @db.VarChar(255)
  age       Int?
  deleted   Boolean?  @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
}

model Product {
  id            Int          @id @default(autoincrement())
  name          String       @unique @db.VarChar(255)
  title         String       @db.VarChar(255)
  content       String       @db.VarChar(255)
  deleted       Boolean?     @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])
  subCategoryId Int?
  tags          Json?
  images        Image[]
  comments      Comment[]
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  name_en     String        @unique @db.VarChar(255)
  description String        @db.VarChar(255)
  deleted     Boolean?      @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SubCategory SubCategory[]
}

model SubCategory {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(255)
  name_en     String    @unique @db.VarChar(255)
  description String    @db.VarChar(255)
  deleted     Boolean?  @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  Product     Product[]
}

model Image {
  id          Int        @id @default(autoincrement())
  path        String     @db.VarChar(255)
  name        String     @db.VarChar(255)
  deleted     Boolean?   @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  product     Product?   @relation(fields: [productId], references: [id])
  productId   Int?       @unique
  pageabout   Pageabout? @relation(fields: [pageaboutId], references: [id])
  pageaboutId Int?       @unique
}

model Comment {
  id        Int      @id @default(autoincrement())
  title     String?  @db.VarChar(255)
  content   String?  @db.VarChar(255)
  point     Int?
  deleted   Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model ContactUs {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(255)
  surname   String?  @db.VarChar(255)
  mail      String?  @db.VarChar(255)
  phone     String?  @db.VarChar(255)
  readed    Boolean? @default(false)
  deleted   Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Site {
  id          Int      @id @default(autoincrement())
  headerLogo  String?  @db.VarChar(255)
  footerLogo  String?  @db.VarChar(255)
  mail        String?  @db.VarChar(255)
  phone       String?  @db.VarChar(255)
  address     String?  @db.VarChar(255)
  footerText  String?  @db.VarChar(255)
  aboutUsText String?  @db.VarChar(1500)
  point       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  pageAbout Json?
}

model Pageabout {
  id        Int      @id @default(autoincrement())
  locale    String   @db.VarChar(255)
  bigTitle  String?  @db.VarChar(255)
  title     String   @db.VarChar(255)
  content   String   @db.VarChar(255)
  deleted   Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    Image[]
}
